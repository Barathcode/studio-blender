"""This file is mostly a copy of addons/io_export_skybrush_csv.py, which
will probably be deprecated soon as its functionality is merged with the
"main" Blender addon.

The operator provided in this file exports drone show trajectories and light
animation to a simple (zipped) .csv format compatible with the Skybrush suite.

The primary and recommended drone show format of the Skybrush suite is the
Skybrush Compiled Format (.skyc), which is much more versatile and optimized
than the simple text output generated by this script.

This script is created for those who want to use their own scripts or tools for
post-processing.
"""

import bpy
import os

from bpy.props import BoolProperty, StringProperty, FloatProperty
from bpy.types import Operator
from bpy_extras.io_utils import ExportHelper

from sbstudio.plugin.api import call_api_from_blender_operator
from sbstudio.plugin.props.frame_range import FrameRangeProperty

from .utils import export_show_to_file_using_api

__all__ = ("SkybrushCSVExportOperator",)


#############################################################################
# Operator that allows the user to invoke the CSV export operation
#############################################################################


class SkybrushCSVExportOperator(Operator, ExportHelper):
    """Export object trajectories and light animation into a Skybrush-compatible simple CSV format"""

    bl_idname = "export_scene.skybrush_csv"
    bl_label = "Export Skybrush CSV"
    bl_options = {"REGISTER"}

    # List of file extensions that correspond to Skybrush CSV files (zipped)
    filter_glob = StringProperty(default="*.zip", options={"HIDDEN"})
    filename_ext = ".zip"

    # output all objects or only selected ones
    export_selected = BoolProperty(
        name="Export selected drones only",
        default=False,
        description=(
            "Export only the selected drones. "
            "Uncheck to export all drones, irrespectively of the selection."
        ),
    )

    # frame range
    frame_range = FrameRangeProperty(default="RENDER")

    # output frame rate
    output_fps = FloatProperty(
        name="Frame rate",
        default=4,
        description="Number of samples to take from trajectories and lights per second",
    )

    def execute(self, context):
        filepath = bpy.path.ensure_ext(self.filepath, self.filename_ext)
        settings = {
            "export_selected": self.export_selected,
            "frame_range": self.frame_range,
            "output_fps": self.output_fps,
        }

        if os.path.basename(filepath).lower() == self.filename_ext.lower():
            self.report({"ERROR_INVALID_INPUT"}, "Filename must not be empty")
            return {"CANCELLED"}

        try:
            with call_api_from_blender_operator(self, "CSV exporter") as api:
                export_show_to_file_using_api(api, context, settings, filepath, "csv")
        except Exception:
            return {"CANCELLED"}

        self.report({"INFO"}, "Export successful")
        return {"FINISHED"}

    def invoke(self, context, event):
        if not self.filepath:
            filepath = bpy.data.filepath or "Untitled"
            filepath, _ = os.path.splitext(filepath)
            self.filepath = f"{filepath}.zip"

        context.window_manager.fileselect_add(self)
        return {"RUNNING_MODAL"}
